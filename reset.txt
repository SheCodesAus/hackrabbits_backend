USER MODELS:

from django.contrib.auth.models import AbstractUser
from django.contrib.auth import get_user_model

# User = get_user_model()

class CustomUser(AbstractUser): 
    USER_TYPE_CHOICES = {
        "ADMIN": "Admin",
        "ROLE_MODEL": "Role Model",
        "COMMUNITY_USER": "Community User",
    }
    user_type = models.CharField(
        max_length=14,
        choices=USER_TYPE_CHOICES,
        default="COMMUNITY_USER",
    )


    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)

    image = models.URLField(max_length=2000, blank=True, null=True)
    current_role = models.CharField(max_length=50)
    inspiration = models.CharField(max_length=200)
    advice = models.CharField(max_length=200)
   
    LOCATION_CHOICES = {
        "WA": "Western Australia",
        "SA": "South Australia",
        "VIC": "Victoria",
        "TAS": "Tasmania",
        "ACT": "Australian Capital Territory",
        "NSW": "New South Wales",
        "QLD": "Queensland",
        "NT": "Northern Territory",
    }
    location = models.CharField(
        max_length=3,
        choices=LOCATION_CHOICES,
    )

    phone_number = models.CharField(max_length=10)
    email = models.EmailField(unique=True)

    linkedin = models.CharField(max_length=200)

    def __str__(self):
        return self.username
    

# milestones id, name, description, milestone date 
class Milestone(models.Model):

    name = models.CharField(max_length=200)
    description = models.TextField()
    milestone_date = models.DateField()

    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # related_name shows the reverse relationship, I need some help understanding the relationship on ERD and then will reapplythem. for now we can use set_... which will be generated by default

# user milestone id, fk to user id and fk from milestone class ,
######################## please feel free to change the related name as you wish
class UserMilestone(models.Model):

    user = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        # related_name='user_milestones'
    )

    milestone = models.ForeignKey(
        Milestone, 
        on_delete=models.CASCADE,
        # related_name='milestone_users'
    )


# acheivement id, name, badge icon 
# many-to-many relationship between users and milestones

#################### not sure if it should be url field for badge? 

class Achievement(models.Model):
    name = models.CharField(max_length=200)
    badge_icon = models.URLField(max_length=2000, blank=True, null=True)


# user achievements id, fk to user id, fk achievment id from achievment table
class UserAchievement(models.Model):
    user =  models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        # related_name='user_achievements'
    )
    achievement = models.ForeignKey(
        Achievement, 
        on_delete=models.CASCADE,
        # related_name='achievement-users'
)

INDUSTRY_CHOICES = (
    ("IT", "IT"),
    ("Data Science", "Data Science"),
    ("Web Development", "Web Development"),
    ("Cybersecurity", "Cybersecurity"),
    ("Business Intelligence", "Business Intelligence"),
    ("Education", "Education"),
    ("Healthcare", "Healthcare"),
    ("Manufacturing", "Manufacturing"),
)

# dictionary gives us unorder list I will use tuple 

# industry id and name 
class Industry(models.Model):
    
    industry_name = models.CharField(
        max_length=25,
        choices=INDUSTRY_CHOICES,
        # related_name='user_industries'

    )


# user industry id, fk user id, fk industry id
class UserIndustry(models.Model):

    user = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        # related_name='industry_users'
    )

    industry = models.ForeignKey(
        Industry,
        on_delete=models.CASCADE,
        # related_name='industries'

    )

############################################ I am not sure if i understand user categories? 
CATEGORIES_CHOICES = (
    ("ADMIN", "Admin"),
    ("ROLE_MODEL", "Role Model"),
    ("COMMUNITY_USER", "Community User"),
)

class Category(models.Model):
    category_name = models.CharField(
        max_length=15,
        choices=CATEGORIES_CHOICES,
    )

    
class UserCategory(models.Model):
    user = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        # related_name='category_users'
    )

    category = models.ForeignKey(
        Category, 
        on_delete=models.CASCADE,
        related_name='user_category'

    )

SKILL_CHOICES = (
    ("Management", "Management"),
    ("Frontend", "Frontend"),
    ("Backend", "Backend"),
)

class Skill(models.Model):
    skills_name = models.CharField(
        max_length=15,
        choices=SKILL_CHOICES,
        # related_name = 'user_skills',
    )

class UserSkill(models.Model):
    user = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE,
        # related_name='user_skills'
    )
    skill = models.ForeignKey(
        Skill,
        on_delete=models.CASCADE,
        # related_name='user_skill'
    )


LOCATION_CHOICES = (
    ("PER", "Perth"),
    ("MEL", "Melbourne"),
    ("SYD", "Sydney"),
    ("BRI", "Brisbane"),
    ("ADE", "Adelaide"),
    ("HOB", "Hobart"),
    ("DAR", "Darwin"),
    ("CAN", "Canberra"),
)


# # # # # # # # # # # # # # # # # # # # # #  I am adding cities as Estera request

location = models.CharField(
        max_length=3,
        choices=LOCATION_CHOICES,
        # related_name='user_locations'

    )

class Location(models.Model):
    city = models.CharField(
        max_length=3,
        choices=LOCATION_CHOICES,
        # related_name='user_locations'

    )

class UserLocation(models.Model):

    user = models.ForeignKey(
        CustomUser,
        on_delete=models.CASCADE
        
        )
    
    location = models.ForeignKey(
        Location, 
        on_delete=models.CASCADE
        )




# Locations
class Location(models.Model):
    city = models.CharField(max_length=100)

    def __str__(self):
        return self.city

class UserLocation(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name="user_locations")
    location = models.ForeignKey(Location, on_delete=models.CASCADE, related_name="location_users")
